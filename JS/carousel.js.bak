/* 
* @Author: Anle
* @Date:   2016-02-24 17:05:22
* @Last Modified by:   Anle
* @Last Modified time: 2016-02-25 17:59:52
*/

'use strict';

//匿名自执行函数,开头加分号是为了防止前面js没有合并而报错.
;(function($){
	//定义一个Carousel的方法
   var  Carousel=function(poster){
	   //保存单个节点对象
	   this.poster=poster;
	   //设置图片旋转区域的ul的大小
	   this.posterItemMain=poster.find("ul.poster_list");
	   //保存上下切换按钮
	   this.nextBtn=poster.find("div.posoter_next_btn");
	   this.prevBtn=poster.find("div.poster_prev_btn");
	   //保存幻灯片第一帧
	   this.posterFirseItem=this.posterItemMain.find("li.poster_list_item:eq(0)")
       
       
	   //设置默认参数
	   this.setting={
	     "width":1000,//幻灯片的宽度
         "height":270,//幻灯片的高度
         "posterWidth":640,//幻灯片第一帧的宽度
         "posterHeight":270,//幻灯片第一帧的高度
         "scale":0.9,
         "speed":500,
         "verticalAlign":"middle"
	   }
	   //使用jquery.extend方法去扩展对象(扩展默认参数),扩展的属性对象有的话就扩展,没有的话就添加
	   $.extend(this.setting,this.getSetting());
	   //console.log($.extend(this.setting,this.getSetting()));//width:900 配置参数如果默认有相同的属性,那么会覆盖掉默认配置参数
       //console.log(this.setting.width);  

	   //设置默认参数
	   this.setStingValue();
   };
   //将公共方法添加到Carousel.prototype上面
   Carousel.prototype={
	   //设置配置参数数字去控制基本的高度宽度
	   setStingValue:function(){
	      this.poster.css({
		     width:this.setting.width,//因为通过$.extend扩展对象将人工设置参数和默认配置参数合并到一起了,这样就改变了this.setting对象的值
			 height:this.setting.height
		  });
		//设置图片轮播区域的大小
		this.posterItemMain.css({
		    width:this.setting.width,
			height:this.setting.height
		});
		//计算上下按钮的宽度值(上下按钮的位置值等于旋转区域的宽度-第一帧图片的宽度)
		var w=(this.setting.width-this.setting.posterWidth)/2;
		this.prevBtn.css({
			  width:w,
			  height:this.setting.height
			});
		this.nextBtn.css({
			  width:w,
			  height:this.setting.height
			});
	    //设置幻灯片第一帧的位置
		this.posterFirseItem.css({
		   
		});
	   },
	   // 用来获取人工配置参数
	   getSetting:function(){
	      var setting=this.poster.attr("data-setting");
		  //判断人工配置属性是否存在,返回对象(将配置属性返回出来)
		  if(setting && setting!=null){
		     return $.parseJSON(setting); 
		  }else{
		     return {};
		  }
	   }

   };
   //初始化方法页面所以旋转木马的集合(传递集合类)
   Carousel.init=function(posters){
       var  _this=this;//这里的this会指向Carousel类,Carousel接收一个单个的要执行的集合(指针传递)
       //循环遍历集合
       posters.each(function(){
            // posters.each(function(index,item){}),这里也可以传递new _this的时候也可以把item传递进来,也是代表循环的当前对象
           //实例化一个Carousel类
           new _this($(this));//这里的this会指向循环posters类的当前对象(会是一个dom节点,转换成dom节点)

       });

   }


   //将Carousel类暴露到全局上
   window["Carousel"]=Carousel;
})(jQuery);